---
title: "Short vs. long RNA-seq (differentiation over timecourse)"
author: "Michel Tarnow"
date: today
format: 
    html:
      toc: true
      self-contained: true
      highlight-style: github
      code-line-numbers: true
editor_options: 
    chunk_output_type: inline
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Load packages

```{r message=FALSE, warning=FALSE}
library(tidyverse)
library(RColorBrewer)
library(edgeR)
library(UpSetR)
```

## Load data

```{r}
df_list_bambu <- readRDS("../bambu.rds")
df_list_salmon <- readRDS("../salmon.rds")
df_list_meta <- readRDS("../meta.rds")
```

```{r}
bambu_0.025_gene <- df_list_bambu$bambu_0.025_gene
bambu_0.05_gene <- df_list_bambu$bambu_0.05_gene
bambu_0.1_gene <- df_list_bambu$bambu_0.1_gene
bambu_0.2_gene <- df_list_bambu$bambu_0.2_gene

salmon_0.025_gene <- df_list_salmon$salmon_0.025_gene
salmon_0.05_gene <- df_list_salmon$salmon_0.05_gene
salmon_0.1_gene <- df_list_salmon$salmon_0.1_gene
salmon_0.2_gene <- df_list_salmon$salmon_0.2_gene

meta_samples <- df_list_meta$metadata
```

## Filtering of expressed genes

```{r}
# filter expressed genes
## threshold: genes must have an average expression > 0
## filter only genes that are not expressed in both salmon and bambu

# 0.025
expressed_salmon <- rowMeans(salmon_0.025_gene) > 0
expressed_bambu <- rowMeans(bambu_0.025_gene) > 0

not_expressed <-
  intersect(names(expressed_salmon[!expressed_salmon]), names(expressed_bambu[!expressed_bambu]))

if (length(not_expressed) > 0) {
  salmon_0.025_gene_exp <-
    salmon_0.025_gene[-which(rownames(salmon_0.025_gene) %in% not_expressed), ]
  bambu_0.025_gene_exp <-
    bambu_0.025_gene[-which(rownames(bambu_0.025_gene) %in% not_expressed), ]
} else {
  salmon_0.025_gene_exp <- salmon_0.025_gene
  bambu_0.025_gene_exp <- bambu_0.025_gene
}

# 0.05
expressed_salmon <- rowMeans(salmon_0.05_gene) > 0
expressed_bambu <- rowMeans(bambu_0.05_gene) > 0

not_expressed <-
  intersect(names(expressed_salmon[!expressed_salmon]), names(expressed_bambu[!expressed_bambu]))

if (length(not_expressed) > 0) {
  salmon_0.05_gene_exp <-
    salmon_0.05_gene[-which(rownames(salmon_0.05_gene) %in% not_expressed), ]
  bambu_0.05_gene_exp <-
    bambu_0.05_gene[-which(rownames(bambu_0.05_gene) %in% not_expressed), ]
} else {
  salmon_0.05_gene_exp <- salmon_0.05_gene
  bambu_0.05_gene_exp <- bambu_0.05_gene
}

# 0.1
expressed_salmon <- rowMeans(salmon_0.1_gene) > 0
expressed_bambu <- rowMeans(bambu_0.1_gene) > 0

not_expressed <-
  intersect(names(expressed_salmon[!expressed_salmon]), names(expressed_bambu[!expressed_bambu]))

if (length(not_expressed) > 0) {
  salmon_0.1_gene_exp <-
    salmon_0.1_gene[-which(rownames(salmon_0.1_gene) %in% not_expressed), ]
  bambu_0.1_gene_exp <-
    bambu_0.1_gene[-which(rownames(bambu_0.1_gene) %in% not_expressed), ]
} else {
  salmon_0.1_gene_exp <- salmon_0.1_gene
  bambu_0.1_gene_exp <- bambu_0.1_gene
}

# 0.2
expressed_salmon <- rowMeans(salmon_0.2_gene) > 0
expressed_bambu <- rowMeans(bambu_0.2_gene) > 0

not_expressed <-
  intersect(names(expressed_salmon[!expressed_salmon]), names(expressed_bambu[!expressed_bambu]))

if (length(not_expressed) > 0) {
  salmon_0.2_gene_exp <-
    salmon_0.2_gene[-which(rownames(salmon_0.2_gene) %in% not_expressed), ]
  bambu_0.2_gene_exp <-
    bambu_0.2_gene[-which(rownames(bambu_0.2_gene) %in% not_expressed), ]
} else {
  salmon_0.2_gene_exp <- salmon_0.2_gene
  bambu_0.2_gene_exp <- bambu_0.2_gene
}
```

```{r}
dim(salmon_0.025_gene_exp) == dim(bambu_0.025_gene_exp)
dim(salmon_0.05_gene_exp) == dim(bambu_0.05_gene_exp)
dim(salmon_0.1_gene_exp) == dim(bambu_0.1_gene_exp)
dim(salmon_0.2_gene_exp) == dim(bambu_0.2_gene_exp)
```

## Differential expression analysis

```{r}
day <- factor(meta_samples$time)
```

### 0.025

```{r}
# create design matrix
design <- model.matrix( ~ day)
design

# Salmon 0.025
y_salmon_0.025 <- DGEList(counts = salmon_0.025_gene_exp, group = day)
y_salmon_0.025 <- calcNormFactors(y_salmon_0.025)
## estimate dispersion
y_salmon_0.025 <- estimateDisp(y_salmon_0.025, design)
## fit the negative binomial model
fit <- glmFit(y_salmon_0.025, design)
## conduct genewise statistical tests for a given coefficient contrast (coef = row of design matrix)
lrt_all <- glmLRT(fit, coef = 2:6)
topTags(lrt_all)
## multiple testing correction
decide_dif_s0.025 <-
  decideTests.DGELRT(lrt_all,
                     adjust.method = "BH",
                     p.value = 0.05)
summary(decide_dif_s0.025)

# Bambu 0.025
y_bambu_0.025 <- DGEList(counts = bambu_0.025_gene_exp, group = day)
y_bambu_0.025 <- calcNormFactors(y_bambu_0.025)
## estimate dispersion
y_bambu_0.025 <- estimateDisp(y_bambu_0.025, design)
## fit the negative binomial model
fit <- glmFit(y_bambu_0.025, design)
## conduct genewise statistical tests for a given coefficient contrast (coef = row of design matrix)
lrt_all <- glmLRT(fit, coef = 2:6)
topTags(lrt_all)
## multiple testing correction
decide_dif_b0.025 <-
  decideTests.DGELRT(lrt_all,
                     adjust.method = "BH",
                     p.value = 0.05)
summary(decide_dif_b0.025)
```

```{r}
de_genes_0.025 <- as.data.frame(cbind(decide_dif_s0.025, decide_dif_b0.025))
colnames(de_genes_0.025) <- c("Salmon_0.025", "Bambu_0.025")

# make UpSet plot
upset(de_genes_0.025, sets = colnames(de_genes_0.025))
```

### 0.05

```{r}
# create design matrix
design <- model.matrix( ~ day)
design

# Salmon 0.05
y_salmon_0.05 <- DGEList(counts = salmon_0.05_gene_exp, group = day)
y_salmon_0.05 <- calcNormFactors(y_salmon_0.05)
## estimate dispersion
y_salmon_0.05 <- estimateDisp(y_salmon_0.05, design)
## fit the negative binomial model
fit <- glmFit(y_salmon_0.05, design)
## conduct genewise statistical tests for a given coefficient contrast (coef = row of design matrix)
lrt_all <- glmLRT(fit, coef = 2:6)
topTags(lrt_all)
## multiple testing correction
decide_dif_s0.05 <-
  decideTests.DGELRT(lrt_all,
                     adjust.method = "BH",
                     p.value = 0.05)
summary(decide_dif_s0.05)

# Bambu 0.05
y_bambu_0.05 <- DGEList(counts = bambu_0.05_gene_exp, group = day)
y_bambu_0.05 <- calcNormFactors(y_bambu_0.05)
## estimate dispersion
y_bambu_0.05 <- estimateDisp(y_bambu_0.05, design)
## fit the negative binomial model
fit <- glmFit(y_bambu_0.05, design)
## conduct genewise statistical tests for a given coefficient contrast (coef = row of design matrix)
lrt_all <- glmLRT(fit, coef = 2:6)
topTags(lrt_all)
## multiple testing correction
decide_dif_b0.05 <-
  decideTests.DGELRT(lrt_all,
                     adjust.method = "BH",
                     p.value = 0.05)
summary(decide_dif_b0.05)
```

```{r}
de_genes_0.05 <- as.data.frame(cbind(decide_dif_s0.05, decide_dif_b0.05))
colnames(de_genes_0.05) <- c("Salmon_0.05", "Bambu_0.05")

# make UpSet plot
upset(de_genes_0.05, sets = colnames(de_genes_0.05))
```

### 0.1

```{r}
# create design matrix
design <- model.matrix( ~ day)
design

# Salmon 0.1
y_salmon_0.1 <- DGEList(counts = salmon_0.1_gene_exp, group = day)
y_salmon_0.1 <- calcNormFactors(y_salmon_0.1)
## estimate dispersion
y_salmon_0.1 <- estimateDisp(y_salmon_0.1, design)
## fit the negative binomial model
fit <- glmFit(y_salmon_0.1, design)
## conduct genewise statistical tests for a given coefficient contrast (coef = row of design matrix)
lrt_all <- glmLRT(fit, coef = 2:6)
topTags(lrt_all)
## multiple testing correction
decide_dif_s0.1 <-
  decideTests.DGELRT(lrt_all,
                     adjust.method = "BH",
                     p.value = 0.05)
summary(decide_dif_s0.1)

# Bambu 0.1
y_bambu_0.1 <- DGEList(counts = bambu_0.1_gene_exp, group = day)
y_bambu_0.1 <- calcNormFactors(y_bambu_0.1)
## estimate dispersion
y_bambu_0.1 <- estimateDisp(y_bambu_0.1, design)
## fit the negative binomial model
fit <- glmFit(y_bambu_0.1, design)
## conduct genewise statistical tests for a given coefficient contrast (coef = row of design matrix)
lrt_all <- glmLRT(fit, coef = 2:6)
topTags(lrt_all)
## multiple testing correction
decide_dif_b0.1 <-
  decideTests.DGELRT(lrt_all,
                     adjust.method = "BH",
                     p.value = 0.05)
summary(decide_dif_b0.1)
```

```{r}
de_genes_0.1 <- as.data.frame(cbind(decide_dif_s0.1, decide_dif_b0.1))
colnames(de_genes_0.1) <- c("Salmon_0.1", "Bambu_0.1")

# make UpSet plot
upset(de_genes_0.1, sets = colnames(de_genes_0.1))
```

### 0.2

```{r}
# create design matrix
design <- model.matrix( ~ day)
design

# Salmon 0.2
y_salmon_0.2 <- DGEList(counts = salmon_0.2_gene_exp, group = day)
y_salmon_0.2 <- calcNormFactors(y_salmon_0.2)
## estimate dispersion
y_salmon_0.2 <- estimateDisp(y_salmon_0.2, design)
## fit the negative binomial model
fit <- glmFit(y_salmon_0.2, design)
## conduct genewise statistical tests for a given coefficient contrast (coef = row of design matrix)
lrt_all <- glmLRT(fit, coef = 2:6)
topTags(lrt_all)
## multiple testing correction
decide_dif_s0.2 <-
  decideTests.DGELRT(lrt_all,
                     adjust.method = "BH",
                     p.value = 0.05)
summary(decide_dif_s0.2)

# Bambu 0.2
y_bambu_0.2 <- DGEList(counts = bambu_0.2_gene_exp, group = day)
y_bambu_0.2 <- calcNormFactors(y_bambu_0.2)
## estimate dispersion
y_bambu_0.2 <- estimateDisp(y_bambu_0.2, design)
## fit the negative binomial model
fit <- glmFit(y_bambu_0.2, design)
## conduct genewise statistical tests for a given coefficient contrast (coef = row of design matrix)
lrt_all <- glmLRT(fit, coef = 2:6)
topTags(lrt_all)
## multiple testing correction
decide_dif_b0.2 <-
  decideTests.DGELRT(lrt_all,
                     adjust.method = "BH",
                     p.value = 0.05)
summary(decide_dif_b0.2)
```

```{r}
de_genes_0.2 <- as.data.frame(cbind(decide_dif_s0.2, decide_dif_b0.2))
colnames(de_genes_0.2) <- c("Salmon_0.2", "Bambu_0.2")

# make UpSet plot
upset(de_genes_0.2, sets = colnames(de_genes_0.2))
```

## Grouping of DE genes

```{r}
# 0.025
x <- which(de_genes_0.025$Salmon_0.025 == 1)
y <- which(de_genes_0.025$Bambu_0.025 == 1)
z <- intersect(x, y)
deg_0.025 <- rownames(de_genes_0.025[z,])
```

## Function/Pathway analysis



















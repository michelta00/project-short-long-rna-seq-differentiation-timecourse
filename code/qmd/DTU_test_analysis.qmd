---
title: "DTU testing pipeline"
author: "Marie, Anna, Michel"
date: today
format: 
    html:
      toc: true
      self-contained: true
      highlight-style: github
      code-line-numbers: true
editor_options: 
    chunk_output_type: inline
---

# Methods

The differential transcript usage analysis was performed in RStudio (Posit team (2023), version 2023.6.2.561, R version 4.3.2 (2023-10-31)).

# Differential Transcript Usage Analysis

Differential Transcript Usage (DTU) was performed to identify gene expression alterations and isoform switching [1]. DTU complements DGE as it enables the identification of alternative splicing and isoform switches even if the gene expression does not change between conditions ([1, 2]). The aim was to identify proportional differences in isoform composition of a gene in samples generated over course of the 5 days and  to compare the results of the differential transcript usage analysis of the Illumina+Salmon data (short read data) with the results of the PacBio+Bambu data (long read data). 

The available workflows ([2, 5]) were tested on the given dataset in this file. The workflow made use of 3 libraries vignettes: DRIMSeq, DEXSeq and stageR. DEXSeq assumes that the feature (transcript) counts follow a negative binomial (NB) distribution and considers them as relative proportions of the group (the gene) using an interaction term in a generalized linear model (GLM) [2, 3]. DRIMSeq assumes that feature proportions follow the Dirichlet distribution (an Dirichlet Multinomial model (MD) for each gene) where the total count for the gene is considered fixed [2, 4]. The filtering was done with DRIMSeq package with both, the minimal number of samples where the genes should be expressed and the the minimal number of samples where the features should be expressed, set to 3 (the number of replicates on day 0 and 5). Additional filters were also added: it was required for a transcript to (1) have count of at least 10 in at least 3 samples, (2) have a relative abundance proportion of at least 0.1 in at least 3 samples, and (3) have the total count of 10 in the corresponding gene in all 3 samples. The filtered DRIMSeq object was used for DEXSeq workflow, as the filtering was easier, and the analysis was sped up. The design formula was taken as `~sample + exon + day:exon` (same as for DGE analysis). DEXSeq analysis included estimation of size factors, estimation of dispersion, and likelihood ratio tests for differential exon usage. The results tables (log2 fold changes and p-values) were generated and per-gene adjusted p-value were computed. stageR package was used for post-processing of the calculated p-values through stage-wise analysis of data, by screening first at the gene level for evidence of DTU (screening stage) and confirms which trancsripts within those significant genes show evidence of DTU (confirmation stage). `stageR` analysis was performed with *overall false discovery rate* (OFDR, alpha parameter) equal to 0.05. A custom function `plotExpression` was made to plot the transcript expression of a significant gene [5]. UpsetR plot and Venn diagrams were used to visualize the overlap between the transcripts identified by the two methods. 

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
set.seed(42)
```

## Load packages

```{r message=FALSE, warning=FALSE}
library(tidyverse)
library(ggvenn)
library(DRIMSeq)
library(DEXSeq)
library(stageR)
library(stringr)
library(ggplot2)
library(ggbeeswarm)
library(UpSetR)
library(viridis)
```

## Load data

The data is loaded from RDS-objects that have been created with the import_processing.qmd file. For each of the 4 NDR cutoffs (0.025, 0.05, 0.1, 0.2), two data frames exist containing the expression data (counts) of the two different technologies used to obtain the data:

    1. Illumina sequencing and Salmon quantification (short read)
    2. PacBio sequencing and Bambu quantification (long read)

In total, this adds up to 8 different data frames. Each of these data frames contains 11 samples, which are replicates from one of five different time points. Each time point has 1-3 replicates.

### Load data
```{r}
df_list_bambu <- readRDS("./bambu.rds")
df_list_salmon <- readRDS("./salmon.rds")
df_list_meta <- readRDS("./meta.rds")

## Salmon
salmon_0.025 <- df_list_salmon$salmon_0.025
salmon_0.05 <- df_list_salmon$salmon_0.05
salmon_0.1 <- df_list_salmon$salmon_0.1
salmon_0.2 <- df_list_salmon$salmon_0.2
## Bambu
bambu_0.025 <- df_list_bambu$bambu_0.025
bambu_0.05 <- df_list_bambu$bambu_0.05
bambu_0.1 <- df_list_bambu$bambu_0.1
bambu_0.2 <- df_list_bambu$bambu_0.2
```

# Testing Pipeline

The workflow was taken from [here](https://www.bioconductor.org/packages/release/workflows/vignettes/rnaseqDTU/inst/doc/rnaseqDTU.html) and tested on the given dataset. The workflow makes use of 3 libraries vignettes: DRIMSeq, DEXSeq and stageR

DEXSeq assumes that the feature (transcript) counts follow a negative binomial (NB) distribution and considers them as relative proportions of the group (the gene) using an interaction term in a generalized linear model (GLM) [2, 3]. DRIMSeq assumes that feature proportions follow the Dirichlet distribution (an Dirichlet Multinomial model (MD) for each gene) where the total count for the gene is considered fixed [2, 4]. 

## salmon_0.025

Here, I considered using `tximport` library for salmon data, however, I realized that it has not been adapted for Bambu data and decided to leave it at counts (the same as in DGE).

```{r eval=F}
library(tximport)
txi <- tximport(c("/home/annatoidze/Documents/ETHZ/STA426/project/data/0.1_salmon_day0-rep1/quant.sf"), type="salmon", txOut=TRUE,
                countsFromAbundance="scaledTPM")
cts <- txi$counts
cts <- cts[rowSums(cts) > 0,]
patterns_to_remove <- c("^DQ", "^EF", "^SIRV")
cts <- data.frame(cts)
cts <-
  cts[!grepl(paste(patterns_to_remove, collapse = "|"),
                      rownames(cts)), , drop =F]
```

It is checked how many reads (the range) that mapped to transcriptome using salmon. Also, `txdf` dataframe is created which maps transcripts to corresponding genes.

```{r}
range(colSums(salmon_0.025)/1e6) # Between 14.24 and 93.31 million reads mapped to transcriptome based on the replicate
# Transcript to gene mappings
txdf <- df_list_meta$metagenes_0.025
all(rownames(salmon_0.025) %in% rownames(txdf))
```

The `samps` dataframe relates the sample identifiers to the conditions (in this case, day of the experiment). The `cts` dataframe corresponds to the counts. In order to run DRIMSeq, a dataframe `counts` with the gene ID, the feature (transcript) ID, and then columns for each of the samples is built:

```{r}
samps <- df_list_meta$metadata
samps <- samps %>% column_to_rownames(var="sampleID")
colnames(samps) <- c("sample_id", "day")
samps$day <- factor(samps$day)
cts <- salmon_0.025
colnames(cts) <- samps$sample_id
counts <- data.frame(gene_id=txdf$gene_id,
                     feature_id=rownames(txdf),
                     cts)
```

### DRIMSeq

We create a `dmDSdata` object with previously generated dataframes.

```{r}
d <- dmDSdata(counts=counts, samples=samps)
d
```

As the rows of the object are gene oriented, the genes can by checked by rows (sometimes for than one transcript mapped, thus >1 rows shown even if selecting just one):

```{r}
counts(d[1,])
```

### Filtering

The filtering is done using the function `dmFilter` from DRIMSeq package. *n* is defined as the minimal number of samples where the genes should be expressed. *n.small* is the minimal number of samples where the features should be expressed. Both are set to 3, as that is the number of replicates for day 0 and 5. Additional filters are also added: for a transcript to be retained in the dataset, it is required that (1) it has a count of at least 10 in at least *n.small* samples, (2) it has a relative abundance proportion of at least 0.1 in at least *n.small* samples, and (3) the total count of the corresponding gene is at least 10 in all *n* samples.

```{r}
n <- 3
n.small <- 3
d <- dmFilter(d,
              min_samps_feature_expr=n.small, min_feature_expr=10,
              min_samps_feature_prop=n.small, min_feature_prop=0.1,
              min_samps_gene_expr=n, min_gene_expr=10)
d
plotData(d)
```

It can be seen how many of the remaining genes have *N* isoforms.

```{r}
table(table(counts(d)$gene_id))
```

### Creating design matrix

The design matrix is created in a way that the first time point, day0, is used as a baseline (intercept of the model).

```{r}
design_full <- model.matrix(~day, data=DRIMSeq::samples(d))
colnames(design_full)
```

### Precision calculation

`dmPrecision` is used to estimate the precision by maximum likelihood. It is inversely related to the dispersion in the DM model via following relation: $dispersion = \frac{1}{1 + precision}$. `dmFit` is used to fit regression coefficients and estimate feature propotrions for each sample. `dmTest` is used to perform null hypothesis likelihood ratio testing on `day5`. `plotPrecision` is used to plot precision (y-axis) against mean expression (x-axis). In RNA-seq data there is usually a trend of decrease of dispersion (here, increase of precision) with increase of mean expression. This is the trend observed here.

```{r}
system.time({
  d <- dmPrecision(d, design=design_full)
  d <- dmFit(d, design=design_full)
})

plotPrecision(d)
# Numeric vector of mean gene expression.
head(mean_expression(d))
# Numeric value of estimated common precision.
common_precision(d)
# Numeric vector of estimated gene-wise precisions.
head(genewise_precision(d))

## Get fitted proportions - estimated feature ratios for each sample
head(proportions(d))
## Get the DM regression coefficients (gene-level) 
head(coefficients(d))
## Get the BB regression coefficients (feature-level) 
head(coefficients(d), level = "feature")
```


### Testing and results

```{r}
## Fit null model proportions and perform the LR test to detect DTU
d <- dmTest(d, coef="day5")

## Plot the gene-level p-values
plotPValues(d)

## Get the gene-level results
## Plot feature proportions for a top DTU gene
res <- DRIMSeq::results(d)
res <- res[order(res$pvalue, decreasing = FALSE), ]

### Get the feature-level results
res.txp <- DRIMSeq::results(d, level="feature")
res.txp <- res.txp[order(res.txp$pvalue, decreasing = FALSE), ]

# Significant gene results
idx <- which(res$adj_pvalue < 0.05)
head(res[idx,])
length(idx)

# Significant isoform results
idx.txp <- which(res.txp$adj_pvalue < 0.05)
head(res.txp[idx.txp,])
length(idx.txp)
```

*pvalue* may contain NA values which may cause downstream errors (in stagewise analysis by `stageR`) so they are converted to 1`s.

```{r}
no.na <- function(x) ifelse(is.na(x), 1, x)
res$pvalue <- no.na(res$pvalue)
res.txp$pvalue <- no.na(res.txp$pvalue)
```


### Plotting

For a given gene, plot the observed and estimated with Dirichlet-multinomial model feature proportions in each group. Estimated group proportions are marked with diamond shapes.


```{r}
top_gene_id <- res$gene_id[1]
plotProportions(d, gene_id = top_gene_id, group_variable = "day")

plotProportions(d, gene_id = top_gene_id, group_variable = "day", 
  plot_type = "lineplot")

plotProportions(d, gene_id = top_gene_id, group_variable = "day", 
  plot_type = "ribbonplot")
```

### StageR following DRIMSeq

stageR package does stage-wise analysis of data, by screening first at the gene level for evidence of DTU (screening stage) and confirms which trancsripts within those significant genes show evidence of DTU (confirmation stage).

```{r}
nrow(res)
```

A vector of per-gene p-values `pScreen` for the screening stage is constructed. Addiionally, the gene and transcript version numbers are stripped from their Ensembl IDs (only first 15 characters are kept).

```{r}
pScreen <- res$pvalue
strp <- function(x) substr(x,1,15)
names(pScreen) <- strp(res$gene_id)
```

A one column matrix of the confirmation p-values `pConfirmation` is constructed:

```{r}
pConfirmation <- matrix(res.txp$pvalue, ncol=1)
rownames(pConfirmation) <- strp(res.txp$feature_id)
```

A two column dataframe `tx2gene`with the transcript and gene identifiers is arranged:

```{r}
tx2gene <- res.txp[,c("feature_id", "gene_id")]
for (i in 1:2) tx2gene[,i] <- strp(tx2gene[,i])
```

`stageR` analysis is perform with *overall false discovery rate* (OFDR, alpha parameter) equal to 0.05. 

```{r}
stageRObj <- stageRTx(pScreen=pScreen, pConfirmation=pConfirmation,
                      pScreenAdjusted=FALSE, tx2gene=tx2gene)
stageRObj <- stageWiseAdjustment(stageRObj, method="dtu", alpha=0.05)
suppressWarnings({
  drim.padj <- getAdjustedPValues(stageRObj, order=FALSE,
                                  onlySignificantGenes=TRUE)
})
head(drim.padj)
nrow(drim.padj)
```

The data.frame dex.padj summarizes the adjusted p-values from the two-stage analysis. Only genes that passed the filter (screening) are included in the table. The transcripts (column `trancsript`) with values less than 0.05 (5 \% OFDR) pass the confirmation stage.

## DEXSeq

The filtered DRIMSeq object is used for DEXSeq workflow, as the filtering is easier, and the analysis is sped up. `DEXSeqDataSet` is built from `d`, filtered DRIMseq object, sample information (`sample.data`), a design formula, transcript ID and gene ID:

```{r}
sample.data <- DRIMSeq::samples(d)
# We start with already filtered DRIMSeq object
count.data <- round(as.matrix(counts(d)[,-c(1:2)]))
dxd <- DEXSeqDataSet(countData=count.data,
                     sampleData=sample.data,
                     design=~sample + exon + day:exon,
                     featureID=counts(d)$feature_id,
                     groupID=counts(d)$gene_id)
```

DEXSeq analysis is performed using the following 3 functions: (1) estimation of size factors using `estimateSizeFactors`, (2) estimation of dispersion `estimateDispersions`, then (3) perform a likelihood ratio test for differential exon usage (in this case, transcripts) `testForDEU`. 

```{r}
system.time({
  dxd <- estimateSizeFactors(dxd)
  dxd <- estimateDispersions(dxd, quiet=TRUE)
  dxd <- testForDEU(dxd, reducedModel=~sample + exon)
})
```

The results tables (log2 fold changes and p-values) can be generated using the `DEXSeqResults `function and `perGeneQValue` function is used to compute a per-gene adjusted p-value.

```{r}
dxr <- DEXSeqResults(dxd, independentFiltering=FALSE)
qval <- perGeneQValue(dxr)
# Per gene
dxr.g <- data.frame(gene=names(qval),qval)
# Per transcript
dxr.t = as.data.frame(dxr[, c("featureID","groupID","pvalue")])
head(dxr.g)
```

Results:
```{r}
# Number of identified genes showing evidence for DTU
nrow(dxr.g[dxr.g$qval < 0.05,])
# Number of transcripts involved
nrow(dxr[dxr$padj < 0.05,])
```

### stageR following DEXSeq

The code for the procedure is similar to DRIMSeq procedure, with `alpha=0.05`.
```{r}
strp <- function(x) substr(x,1,15)
pConfirmation <- matrix(dxr$pvalue,ncol=1)
dimnames(pConfirmation) <- list(strp(dxr$featureID),"transcript")
pScreen <- qval
names(pScreen) <- strp(names(pScreen))
tx2gene <-  data.frame(dxr.t[,c("featureID", "groupID")], 
dxr.t[,c("featureID", "groupID")])
for (i in 1:2) tx2gene[,i] = strp(tx2gene[,i])
stageRObj <- stageRTx(pScreen=pScreen, pConfirmation=pConfirmation,
                      pScreenAdjusted=TRUE, tx2gene=tx2gene[1:2])
stageRObj = stageRTx(pScreen = pScreen, 
pConfirmation = pConfirmation, 
pScreenAdjusted = TRUE, 
tx2gene = tx2gene[1:2])

stageRObj = stageWiseAdjustment(stageRObj, method = "dtu", alpha = 0.05)

suppressWarnings({
  dex.padj <- getAdjustedPValues(stageRObj, order=FALSE,
                                 onlySignificantGenes=TRUE)
})

dex.padj = merge(tx2gene, dex.padj, by.x = c("groupID","featureID"), by.y = c("geneID","txID"))

head(dex.padj)
```

```{r}
length(unique(dex.padj[dex.padj$gene < 0.05,]$groupID))
table(dex.padj$transcript < 0.05)
```

### Exporting the results
```{r}
dex.norm = cbind(as.data.frame(stringr::str_split_fixed(rownames(counts(dxd)), ":", 2)), as.data.frame(counts(dxd, normalized = TRUE))[,1:20])
colnames(dex.norm) = c("groupID", "featureID", as.character(colData(dxd)$sample_id)[1:20])
row.names(dex.norm) = NULL
# Per-group normalised mean
dex.mean = as.data.frame(sapply( levels(samps$day), 
function(lvl) rowMeans(dex.norm[, 3:ncol(dex.norm)][, samps$day == lvl, drop = FALSE]) ))
colnames(dex.mean) <- paste0("mean.day", colnames(dex.mean))

# log2 fold change in expression
dex.log2fc = log2(dex.mean[2]/dex.mean[1])
colnames(dex.log2fc) = "log2fc"
rownames(dex.log2fc) = dex.norm$featureID

# Merge to create result data
dexData = cbind(dex.norm[,1:2], dex.mean, dex.norm[, 3:ncol(dex.norm)])
colnames(dexData)[1:2] <-  c("GeneID","TranscriptID")
dexData = dexData[order(dexData$GeneID, dexData$TranscriptID),]

# Merge to create result data
dexDTU = merge(dex.padj[,c("featureID.1","groupID.1","gene","transcript")], dex.log2fc, by.x = "featureID.1", by.y = "row.names")
colnames(dexDTU)[1:2] <-  c("TranscriptID","GeneID")
dexDTU = dexDTU[order(dexDTU$GeneID, dexDTU$TranscriptID),]

```


### Plotting

A custom function `plotExpression` was made to plot the transcript expression of a given gene as from ![here](https://ycl6.gitbook.io/guide-to-rna-seq-analysis/differential-expression-analysis/differential-transcript-usage/dtu-using-dexseq).

```{r}
# We will use this function in both DRIMSeq & DEXSeq workflows
plotExpression <- function(expData = NULL, geneID = NULL, samps = NULL, isProportion = FALSE) {
        colnames(expData)[1:2] = c("gid","tid")
        sub = subset(expData, gid == geneID)
        sub = reshape2::melt(sub, id = c("gid", "tid"))
        sub = merge(samps, sub, by.x = "sample_id", by.y = "variable")
        if(!isProportion) {
                sub$value = log(sub$value)
        }

        clrs = c("dodgerblue3", "maroon2",  "forestgreen", "darkorange1", "blueviolet", "firebrick2",
"deepskyblue", "orchid2", "chartreuse3", "gold", "slateblue1", "tomato" , "blue", "magenta", "green3",
"yellow", "purple3", "red" ,"darkslategray1", "lightpink1", "lightgreen", "khaki1", "plum3", "salmon")

        p = ggplot(sub, aes(tid, value, color = day, fill = day)) +
        geom_boxplot(alpha = 0.4, outlier.shape = NA, width = 0.8, lwd = 0.5) +
        stat_summary(fun = mean, geom = "point", color = "black", shape = 5, size = 3, position=position_dodge(width = 0.8)) +
        scale_color_manual(values = clrs) + scale_fill_manual(values = clrs) +
        geom_quasirandom(color = "black", size = 1, dodge.width = 0.8) + theme_bw() +
        ggtitle(geneID) + xlab("Transcripts")

        if(!isProportion) {
                p = p + ylab("log(Expression)")
        } else {
                p = p + ylab("Proportions")
        }
        p
}

```


```{r}
# Plot the normalised counts for one of the significant genes, where we can see evidence of switching
gene_id <-  unique(dex.padj[order(dex.padj$transcript, dex.padj$gene),]$groupID.1)[1]
plotExpression(dex.norm, gene_id, samps, isProportion = T)
```

## Comparison of DRIMSeq and DEXSeq

Number of identified transcripts from DEXSeq: 

```{r}
dim(dex.padj[order(dex.padj$gene, decreasing = T), ])
```

Number of identified transcripts from DRIMSeq:

```{r}
dim(drim.padj[order(drim.padj$gene, decreasing = T), ])
```


Check the intersection between the different methods for screened genes:

```{r}
length(intersect(dex.padj$groupID, drim.padj$geneID))
venn <- list(DEX = dex.padj$groupID, DRIM = drim.padj$geneID)
ggvenn(venn)
```

Check the intersection between the different methods for features:

```{r}
length(intersect(dex.padj$featureID, drim.padj$txID))
venn <- list(DEX = dex.padj$featureID, DRIM = drim.padj$txID)
ggvenn(venn)
```

We can see that the intersection is quite low. However, we proceed with DEXSeq pipeline due to computer resource constraints.

# References

[1] Marques-Coelho, D., Iohan, L.d.C.C., Melo de Farias, A.R. et al. Differential transcript usage unravels gene expression alterations in Alzheimer’s disease human brains. npj Aging Mech Dis 7, 2 (2021). https://doi.org/10.1038/s41514-020-00052-5

[2] https://www.bioconductor.org/packages/release/workflows/vignettes/rnaseqDTU/inst/doc/rnaseqDTU.html

[3] Anders S, Reyes A, Huber W. Detecting differential usage of exons from RNA-seq data. Genome Res. 2012 Oct;22(10):2008-17. doi: 10.1101/gr.133744.111.

[4] Nowicka M, Robinson MD. DRIMSeq: a Dirichlet-multinomial framework for multivariate count outcomes in genomics. F1000Res. 2016 Jun 13;5:1356. doi: 10.12688/f1000research.8900.2.

[5] https://ycl6.gitbook.io/guide-to-rna-seq-analysis/differential-expression-analysis/differential-transcript-usage/dtu-using-dexseq 

[6] Al’Khafaji, A.M., Smith, J.T., Garimella, K.V. et al. High-throughput RNA isoform sequencing using programmed cDNA concatenation. Nat Biotechnol (2023). https://doi.org/10.1038/s41587-023-01815-7